---
title: "`r params$NAME_place`"
title-block-banner: true
toc: true
toc-location: right
toc-title: "Content"

format: 
  html: 
    grid: 
      sidebar-width: 200px
      body-width: 1030px
      #margin-width: 70px
    theme: 
      - style.scss
    #page-layout: custom
fig-align: center

params: 
  NAME_place:
    label: "Place:"
    value: Florida
    input: select
    choices: 
    - Florida            
    - Montana            
    - Minnesota          
    - Maryland           
    - South Carolina      
    - Maine               
    - Hawaii              
    - District of Columbia
    - Rhode Island        
    - Nebraska           
    - Washington         
    - New Mexico         
    - Puerto Rico        
    - South Dakota        
    - Texas              
    - California         
    - Alabama             
    - Georgia            
    - Arkansas            
    - Pennsylvania        
    - Missouri            
    - Utah               
    - Oklahoma           
    - Tennessee          
    - Wyoming            
    - Indiana            
    - Kansas              
    - Idaho               
    - Alaska             
    - Nevada              
    - Illinois            
    - Vermont            
    - Connecticut       
    - New Jersey          
    - North Dakota      
    - Iowa                
    - New Hampshire     
    - Arizona             
    - Delaware            
    - Kentucky            
    - Ohio           
    - Wisconsin          
    - Oregon              
    - Mississippi         
    - Colorado            
    - North Carolina      
    - Virginia           
    - West Virginia      
    - Louisiana           
    - New York           
    - Michigan          
    - Massachusetts  
---





```{r setup, include=FALSE}
knitr::opts_chunk$set(warning = FALSE, message = FALSE, include = FALSE, echo = FALSE)
```

```{r}
library(tidyverse)
library(reactable)
library(tigris)
library(leaflet)
library(sf)
library(tidycensus)
library(leaflet.extras)
library(tm)
options(scipen=999)
library(apyramid)
library(ggthemes)
library(patchwork)

```



```{r include= FALSE, echo=FALSE}

sf_state_d <- read_rds("data_clean/segregation_dissimilarity_20240818.rds") |> 
  # filter(name != "Puerto Rico") |> 
  # filter(name != "Alaska") |> 
  # filter(name != "Hawaii") |> 
  select(state = name, geometry, d_wb, d_wh) 


sf_state_i <- readRDS("data_clean/segregation_isolation_20240818.rds") |> 
  # filter(name != "Puerto Rico") |> 
  # filter(name != "Alaska") |> 
  # filter(name != "Hawaii") |> 
  select(state = name, geometry, i_b, i_h)

sf_state_segregation <- readRDS("data_clean/segregation_exposure_20240818.rds") |> 
  select(state = name, geometry, e_h, e_b) |> 
  inner_join(sf_state_d, by = join_by(state, geometry)) |> 
  inner_join(sf_state_i, by = join_by(state, geometry)) |> 
  st_sf()


cleaned_demog <- readRDS("data_clean/acs_cleaned_demog_20240818.rds") |> 
  data.frame() |> 
  select(-geometry)
  # filter(NAME != "Puerto Rico") |> 
  # filter(NAME != "Alaska") |> 
  # filter(NAME != "Hawaii") 
```

::: {.column width="100%"}
```{r include= TRUE, echo=FALSE}

# https://stackoverflow.com/questions/62817005/r-leaflet-assign-multiple-groups-to-a-layer-to-filter-data-and-change-column-re
# https://rstudio.github.io/leaflet/articles/showhide.html
pal1 <- colorBin(palette = "Purples", 
                 domain = sf_state_segregation$d_wb, bins = 5, na.color = "#808080")
pal2 <-colorBin(palette = "Blues", 
                domain = sf_state_segregation$i_b, bins = 5, na.color = "#808080")
pal3 <- colorBin(palette = "Reds", 
                 domain = sf_state_segregation$e_b, bins = 5, na.color = "#808080")

#bins = seq(round(min, 2), round(max, 2), sep)

sf_state_segregation |> 
  leaflet() %>% 
  addProviderTiles("CartoDB.Positron") |> 
  addResetMapButton() %>% 
  #fitBounds(bbox[1], bbox[2], bbox[3], bbox[4]) |> 
  setView(-93.28260584606623,
          39.29656858589331, zoom = 4) |> 
  addPolygons(
    group="Dissiminarity Index",
    color = ~pal1(d_wb),
    weight = 1,  # border thickness
    opacity = 1, # border opacity
    fillOpacity = 0.8,
    highlightOptions = highlightOptions(fillColor ="white",
                                        bringToFront = TRUE),
    label=~paste0(state, ": ", round(d_wb, 3)),
    labelOptions = labelOptions(style = list("font-size" = "12px"))
    ) |>
  addPolygons(
    group="Isolation Index", 
    color = ~pal2(i_b),
    weight = 1,  # border thickness
    opacity = 1, # border opacity
    fillOpacity = 0.8,
    highlightOptions = highlightOptions(fillColor ="white",
                                        bringToFront = TRUE),
    label=~paste0(state, ": ", round(i_b, 2)),
    labelOptions = labelOptions(style = list("font-size" = "12px"))) |> 
  
  addPolygons(
    group="Exposure Index", 
    color = ~pal3(e_b),
    weight = 1,  # border thickness
    opacity = 1, # border opacity
    fillOpacity = 0.8,
    highlightOptions = highlightOptions(fillColor ="white",
                                        bringToFront = TRUE),
    label=~paste0(state, ": ", round(e_b, 2)),
    labelOptions = labelOptions(style = list("font-size" = "12px"))) |> 
  
  addLegend("topright", pal = pal1, values = ~sf_state_segregation$d_wb,
    title = "Dissiminarity Index",
    opacity = 1, group="Dissiminarity Index", bins = 5) |>
  
  addLegend("topright", pal = pal2, values = ~sf_state_segregation$i_b,
    title = "Isolation Index",
    opacity = 1, group="Isolation Index", bins = 5) |> 
  
  addLegend("topright", pal = pal3, values = ~sf_state_segregation$e_b,
    title = "Exposure Index",
    opacity = 1, group="Exposure Index", bins = 5) |>
  
  addLayersControl(baseGroups = c(
                                  "Dissiminarity Index", 
                                  "Isolation Index", 
                                  "Exposure Index"),
                   position="bottomleft",
                   options = layersControlOptions(collapsed = F)) +
  addTitle(object, text, color = "black", fontSize = "20px",
 fontFamily = "Sans", leftPosition = 50, topPosition = 2)
  

```
:::


```{r}
cleaned_demog <- readRDS("data_clean/acs_cleaned_demog_20240818.rds") 

md_details <- cleaned_demog %>% 
    data_frame() |> 
  filter(NAME == params$NAME_place) |> 
  rename(state = NAME)

md_details2 <- cleaned_demog |> 
  rename(state = NAME)
```


```{r message=FALSE, warning=FALSE, include=FALSE}
md_pop <- md_details %>% filter(variable=="totalpop") 
md_female <- md_details %>% filter(variable=="allfemale")
md_male <- md_details %>% filter(variable=="allmale")

md_hispanic <- md_details %>% filter(variable=="hispanic")
md_nhb <- md_details %>% filter(variable=="nhb")
md_nhw <- md_details %>% filter(variable=="nhw")

md_veteran <- md_details %>% filter(variable=="veteran")
md_serviceconnected <-  md_details %>% filter(variable=="hasserviceconnecteddisability")
md_disability <- md_details %>% filter(variable=="hasdisability")
md_ssi <- md_details %>% filter(variable=="hasssi")

md_noinsurance <- md_details %>% filter(variable=="noinsurance")
md_nointernet <- md_details %>% filter(variable=="nointernet")
md_povertybelow100 <- md_details %>% filter(variable=="povertybelow100")
md_poverty100to149 <- md_details %>% filter(variable=="poverty100to149")

md_foreignborn<- md_details %>% filter(variable=="foreignborn")
md_notuscitizen<- md_details %>% filter(variable=="notuscitizen")
md_owneroccupiedhousing<- md_details %>% filter(variable=="owneroccupiedhousing")
md_renteroccupiedhousing<- md_details %>% filter(variable=="renteroccupiedhousing")
md_spanishspeaking<- md_details %>% filter(variable=="spanishspeaking")
md_spanishpoorenglish<- md_details %>% filter(variable=="spanishpoorenglish")
```

```{r include=FALSE}
relationship <- md_details %>% 
  filter(variable=="married"|
         variable=="divorced"|
         variable=="nevermarried"|
         variable=="separated"|
         variable=="widowed") 

#renaming variables
relationship$variable <- sub("married", "Married", relationship$variable)
relationship$variable <- gsub("neverMarried", "Never Married", relationship$variable)
relationship$variable <- gsub("divorced", "Divorced", relationship$variable)
relationship$variable <- gsub("separated", "Separated", relationship$variable)
relationship$variable <- gsub("widowed", "Widowed", relationship$variable)

top_relationship <- relationship %>% 
  slice_max(estimate, n=3)

#compute percentages
top_relationship$fraction <- top_relationship$estimate /sum(top_relationship$estimate)*100
top_relationship$percentage <- paste(round(top_relationship$fraction), "%", sep="")
```

```{r include=FALSE}
male_age <- md_details %>% 
  filter(variable=="male0to14"|
         variable=="male15to19"|
         variable=="male20to24"|
         variable=="male25to29"|
         variable=="male30to34"|
         variable=="male35to39"|
         variable=="male40to44"| 
         variable=="male45to49"|
         variable=="male50to54"|
         variable=="male55to59"|
         variable=="male60to64"|
         variable=="male65plus") %>% 
  mutate(gender="Male") 

  male_age$variable <- str_sub(male_age$variable, 5 ,10)

female_age <- md_details %>% 
  filter(variable=="female0to14"|
         variable=="female15to19"|
         variable=="female20to24"|
         variable=="female25to29"|
         variable=="female30to34"|
         variable=="female35to39"|
         variable=="female40to44"| 
         variable=="female45to49"|
         variable=="female50to54"|
         variable=="female55to59"|
         variable=="female60to64"|
         variable=="female65plus") %>% 
  mutate(gender="Female")

female_age$variable <- str_sub(female_age$variable, 7 ,12)

age <- male_age %>% full_join(female_age)
## sort data by first by gender, then by age groups
age <- with(age, age[order(gender,variable),])
```

```{r include=FALSE}
md_female_percent <- md_details %>% filter(variable=="allfemale"|
                                                         variable=="totalpop") %>%
  mutate(female_percent=paste(round(estimate[1]/estimate[2]*100), "%", sep="")) %>% 
  filter(variable=="allfemale")
```

```{r include=FALSE}
md_male_percent <- md_details %>% filter(variable=="allmale"|
                                                         variable=="totalpop") %>%
  mutate(male_percent=paste(round(estimate[1]/estimate[2]*100), "%", sep="")) %>% 
  filter(variable=="allmale")
```

```{r include=FALSE}
md_foreignborn_percent <- md_details %>% filter(variable=="foreignborn"|
                                                         variable=="totalpop") %>%
  mutate(foreignborn_percent=paste(round(estimate[1]/estimate[2]*100), "%", sep="")) %>% 
  filter(variable=="foreignborn")
```

```{r include=FALSE}
md_notuscitizen_percent <- md_details %>% filter(variable=="notuscitizen"|
                                                         variable=="totalpop") %>%
  mutate(notus_percent=paste(round(estimate[1]/estimate[2]*100), "%", sep="")) %>% 
  filter(variable=="notuscitizen")
```

```{r include=FALSE}
md_spanishspeaking_percent <- md_details %>% filter(variable=="spanishspeaking"|
                                                         variable=="totalpop") %>%
  mutate(spanishspeaking_percent=paste(round(estimate[1]/estimate[2]*100), "%", sep="")) %>% 
  filter(variable=="spanishspeaking")
```

```{r include=FALSE}
md_spanishpoorenglish_percent <- md_details %>% filter(variable=="spanishpoorenglish"|
                                                         variable=="totalpop") %>%
  mutate(spanishpoorenglish_percent=paste(round(estimate[1]/estimate[2]*100), "%", sep="")) %>% 
  filter(variable=="spanishpoorenglish")
```


```{r overall-data}

total_pop <- md_details |> 
  filter(variable == "allfemale" | variable=="allmale") |> 
  group_by(state) |> 
  summarise(total_pop = sum(estimate))

md_details_wide <- md_details |> 
  pivot_wider(names_from = variable,
              values_from = estimate)

no_insurance <- md_details_wide %>%
  select(state, noinsurance, totalpop) |>
  mutate(per = paste0((round((noinsurance/totalpop)*100, 1)), "%"))
  
  
```


\
\

## **Demographics (2019)**

##### **`r params$NAME_place`** boasts a population of `r scales::comma(md_pop$estimate)` inhabitants with approximately `r scales::comma(md_female$estimate)` female (`r md_female_percent$female_percent`) and `r scales::comma(md_male$estimate)` male (`r md_male_percent$male_percent`). Of that population, approximately `r scales::comma(md_foreignborn$estimate)` residents (`r md_foreignborn_percent$foreignborn_percent`) are foreign born and `r scales::comma(md_notuscitizen$estimate)` (`r md_notuscitizen_percent$notus_percent`) are non-citizens. Approximately `r scales::comma(md_spanishspeaking$estimate)` residents (`r md_spanishspeaking_percent$spanishspeaking_percent`) are spanish speaking, of which `r scales::comma(md_spanishpoorenglish$estimate)` (`r md_spanishpoorenglish_percent$spanishpoorenglish_percent`) report difficulty communicating in English.

### [Age & Sex]{.smallcaps}

```{r include=FALSE}
#renaming variables
age$variable <- gsub("0to14", "0-14", age$variable)
age$variable <- gsub("15to19", "15-19", age$variable)
age$variable <- gsub("20to24", "20-24", age$variable)
age$variable <- gsub("25to29", "25-29", age$variable)
age$variable <- gsub("30to34", "30-34", age$variable)
age$variable <- gsub("35to39", "35-39", age$variable)
age$variable <- gsub("40to44", "40-44", age$variable)
age$variable <- gsub("45to49", "45-49", age$variable)
age$variable <- gsub("50to54", "50-54", age$variable)
age$variable <- gsub("55to59", "55-59", age$variable)
age$variable <- gsub("60to64", "60-64", age$variable)
age$variable <- gsub("65plus", "65+", age$variable)


top_age<- age %>%
  group_by(variable) %>% 
  summarize(estimate=sum(estimate)) %>% 
  slice_max(estimate, n=3)

#compute percentages
top_age$fraction <- top_age$estimate /sum(top_age$estimate)*100
top_age$percentage <- paste(round(top_age$fraction), "%", sep="")


```

##### The predominate age categories in `r params$NAME_place` are `r top_age$variable[1]`, `r top_age$variable[2]`, and `r top_age$variable[3]`, representative of `r top_age$percentage[1]`, `r top_age$percentage[2]`, and `r top_age$percentage[3]` of the population, respectively. **Figure 1.1** shows the age distribution of `r params$NAME_place` stratified by gender.

###### 

```{r, include= TRUE, fig.align='center', echo=FALSE}
age$variable <- as.factor(age$variable)
age$gender <- as.factor(age$gender)
apyramid::age_pyramid(data = age,
                      age_group = "variable",
                      split_by = "gender",
                      count="estimate",
                      show_midpoint= FALSE) +
  theme_minimal()+
  scale_fill_manual(values = c("pink", "lightblue"))+ 
  labs(y = "Count",              
       x = "Age Categories",                          
       fill = "Sex", 
       title = "Distribution of Age by Sex")+
  theme(legend.position="bottom", plot.title=element_text(hjust=0.5))
       
```

```{r include=FALSE}
race_eth <- md_details %>% 
  filter(variable=="hispanic"|
         variable=="nhb" |
         variable=="nhw")

#summing other category
race_eth_other <- md_details %>% 
  filter(variable=="nhasian" |
         variable=="nhHIPI" |
         variable=="nhnative") %>% 
  summarize(other=sum(estimate))
 
#combining other with other race categories 
race_eth <- race_eth %>% 
  add_row(variable="other", estimate=race_eth_other$other)

#renaming variables
race_eth$variable <- gsub("hispanic", "Hispanic", race_eth$variable)
race_eth$variable <- gsub("nhb", "Non-Hispanic Black", race_eth$variable)
race_eth$variable <- gsub("nhw", "Non-Hispanic White", race_eth$variable)
race_eth$variable <- gsub("other", "Other", race_eth$variable)
```

```{r include=TRUE, echo=FALSE, fig.height=5, fig.width=8.5}

#compute percentages
race_eth$fraction <- race_eth$estimate /sum(race_eth$estimate)
#compute cumulative percentages
race_eth$ymax <- cumsum(race_eth$fraction)
#compute bottom
race_eth$ymin = c(0, head(race_eth$ymax, n=-1))
#compute label position
race_eth$labelPosition <- (race_eth$ymax+race_eth$ymin)/2
#compute label
race_eth$label <- paste0(c("Hispanic", "Non-Hispanic Black", "Non-Hispanic White", "Other"), " ", race_eth$estimate)

#make plot
dem <- ggplot(race_eth, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=variable))+
  geom_rect()+
  geom_label(x=3.5, aes(y=labelPosition, label=label), size=3)+
  scale_fill_brewer(palette=4)+
  scale_color_brewer(palette=8)+
  coord_polar(theta="y")+
  xlim(c(1,4))+
  theme_void()+
  theme(legend.position = "none")+
  ggtitle("Demographics by Race & Ethnicity")+ 
  theme(plot.title=element_text(hjust=0.5))


```

```{r include=FALSE}
top_race<- race_eth %>%
  slice_max(estimate, n=2)

#compute percentages
top_race$fraction <- top_race$estimate /sum(top_race$estimate)*100
top_race$percentage <- paste(round(top_race$fraction), "%", sep="")
```

```{r}
education_state <- get_acs(geography = "state",
                      state="KY",
                      output="tidy",
                      year=2019,
                      geometry = FALSE,
                      variables= c(
############# EDUCATION
                        lessthanHS="B06009_002",
                        hs="B06009_003",
                        somecollege="B06009_004",
                        bachelor="B06009_005",
                        graddegree="B06009_006"
                        )
                ) |> 
    mutate(variable=factor(variable, levels = c("lessthanHS","hs","somecollege", "bachelor", "graddegree"))) |> 
  mutate(fraction = estimate/sum(estimate),
         percentage = (estimate/sum(estimate))*100) |> 
  mutate(ymax = cumsum(fraction),
         ymin = c(0, head(cumsum(fraction), n=-1))) |> 
  mutate(variable = case_when(
    variable == "lessthanHS" ~ "Less then HS",
    variable == "hs" ~ "High School", 
    variable == "somecollege" ~ "Some College",
    variable == "bachelor" ~ "Bachelor's Degree",
    variable == "graddegree"~ "Graduate Degree"
  )) |> 
  mutate(labelPosition = (ymax + ymin) / 2,
         label = paste0(variable, "\n", scales::percent(fraction))) |> 
  data_frame()

# Make the plot
dem_state <- ggplot(education_state, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=variable)) +
  geom_rect() +
   # x here controls label position (inner / outer)
  geom_text( x=2, aes(y=labelPosition, label=label, color=variable), size=3, color="black") +
  #scale_fill_brewer(palette= "1") +
  scale_color_brewer(palette = "Set1") +
  coord_polar(theta="y") +
  xlim(c(-1.5, 4)) +
  theme_void() +
  theme(legend.position = "none",
        plot.title=element_text(hjust=0.5)) +
  ggtitle("Kentucky: Education Attainment")
```

```{r}
p <- ggplot(data=education_state, aes(x=variable, y=percentage)) +
  geom_bar(stat="identity", fill= "#F8766D", orientation="x")+
  geom_text(aes(label=paste(education$percentage, "%", sep="")), vjust=-0.3, size=3.5) +
  theme_minimal()
```

```{r}
p <- p + scale_x_discrete(labels=c("Less than HS", "HS", "Some College", "Bachelor", "Graduate"))+
  ggtitle("Distribution of Education Level")+
  theme(plot.title=element_text(hjust=0.5))+
  labs(y="Percentage", x="Education")

```

```{r}
top_education<- education_state %>%
  slice_max(estimate, n=2)
```


```{r include=FALSE}


education <- md_details |> 
  filter(variable=="lessthanHS"|
         variable=="hs"|
         variable=="somecollege"|
         variable=="bachelor"|
         variable=="graddegree") |> 
  arrange(factor(variable, levels = c("lessthanHS","hs","somecollege", "bachelor", "graddegree"))) |> 
  mutate(fraction = estimate/sum(estimate),
         percentage = (estimate/sum(estimate))*100) |> 
  mutate(ymax = cumsum(fraction),
         ymin = c(0, head(cumsum(fraction), n=-1))) |> 
  mutate(variable = case_when(
    variable == "lessthanHS" ~ "Less then HS",
    variable == "hs" ~ "High School", 
    variable == "somecollege" ~ "Some College",
    variable == "bachelor" ~ "Bachelor's Degree",
    variable == "graddegree"~ "Graduate Degree"
  )) |> 
  mutate(variable = factor(variable)) |> 
  mutate(labelPosition = (ymax + ymin) / 2,
         label = paste0(variable, "\n", scales::percent(fraction))) 

  


# Make the plot
dem <- ggplot(education, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=variable)) +
  geom_rect() +
   # x here controls label position (inner / outer)
  geom_text( x=2, aes(y=labelPosition, label=label, color=variable), size=3, color="black") +
  #scale_fill_brewer(palette= "1") +
  scale_color_brewer(palette = "Set1") +
  coord_polar(theta="y") +
  xlim(c(-1.5, 4)) +
  theme_void() +
  theme(legend.position = "none",
        plot.title=element_text(hjust=0.5)) +
  ggtitle(paste0(params$NAME_place, ": Education Attainment"))

```






```{r include=FALSE}
top_education<- education %>%
  slice_max(estimate, n=2)
```

### [Race & Education]{.smallcaps}

##### `r params$NAME_place` residents tend to exhibit the following racial/ethnic patterns. The predominate racial/ethnic groups are `r top_race$variable[1]` and `r top_race$variable[2]`, representative of `r top_race$percentage[1]` and `r top_race$percentage[2]` of the population, respectively. The highest percentage of residents tend to attain either a `r top_education$variable[1]` or `r top_education$variable[2]` for education. **Figure 1.2** illustrates the racial and ethnic counts of the state and **Figure 1.3** illustrates the distribution of education attained within `r params$NAME_place`.

##### 



```{r include=TRUE, echo=FALSE, fig.height=4.5, fig.width=8.5}
p
```







##### 


```{r include=TRUE, echo=FALSE, fig.height=4.5, fig.width=8.5}
library(gridExtra)
grid.arrange(dem, dem_state, ncol=2, nrow=1)
```



```{r include=TRUE, echo=FALSE}
# kable(nationality, booktabs = T, col.names = c("Nationality", "Estimate", "Percent"), align = "c") %>% 
#   kableExtra::kable_styling(position = "center") 
```

### [Maritial Status]{.smallcaps}

##### In terms of coupling patterns, the top three relationship statuses of residents are `r top_relationship$variable[1]`, `r top_relationship$variable[2]`, and `r top_relationship$variable[3]` with their corresponding percentages as `r top_relationship$percentage[1]`, `r top_relationship$percentage[2]`, and `r top_relationship$percentage[3]`, respectively.

## **Economics (2019)**

```{r include=FALSE}
md_poverty <- md_povertybelow100$estimate + md_poverty100to149$estimate
```

```{r include=FALSE}
income <- md_details %>% 
  filter(variable=="income1to9999"|
         variable=="income10kto14999" |
         variable=="income15kto24999"|
         variable=="income25kto34999" |
         variable=="income35kto49999" |
         variable=="income50kto64999" |
         variable=="income65kto74999" |
         variable=="income75kplus")

#compute percentages
income$fraction <- income$estimate /sum(income$estimate)*100
income$percentage <- round(income$fraction)

#renaming variables
income$variable <- gsub("income1to9999", "$1,000-$9,999", income$variable)
income$variable <- gsub("income10kto14999", "$10,000-$14,999", income$variable)
income$variable <- gsub("income15kto24999", "$15,000-$24,999", income$variable)
income$variable <- gsub("income25kto34999", "$25,000-$34,999", income$variable)
income$variable <- gsub("income35kto49999", "$35,000-$49,999", income$variable)
income$variable <- gsub("income50kto64999", "$50,000-$64,999", income$variable)
income$variable <- gsub("income65kto74999", "$65,000-$74,999", income$variable)
income$variable <- gsub("income75kplus", "more than $75,000", income$variable)
```

```{r include=FALSE}
p2 <- ggplot(data=income, aes(x=variable, y=percentage)) +
  geom_bar(stat="identity", fill="steelblue")+
  geom_text(aes(label=paste(percentage, "%", sep="")), vjust=-0.3, size=3.5) +
  theme_minimal()
```

```{r include=TRUE, echo=FALSE}
p2 <- p2 + theme(axis.text.x = element_text(angle = 90)) + 
  scale_x_discrete(labels=c("$1K-$1,999","$10K-$14,999", "$15K-$24,999", "$25K-$34,999", "$35k-$49,999","$50k-64,999",
                                                            "$65k-$74,999", "$75k+"))+
  ggtitle("Individual Income Distribution over the Past 12 Months")+
  theme(plot.title=element_text(hjust=0.5))+
  labs(y="Percentage", x="Income Range")
```

```{r include=FALSE}
#income$variable <- str_sub(income$variable, 7 ,16)
top_income<- income %>%
  slice_max(estimate, n=2)
```

```{r include=FALSE}
md_renteroccupiedhousing<- md_details %>% filter(variable=="renteroccupiedhousing")
md_renteroccupiedhousingpercent <- md_details %>% filter(variable=="renteroccupiedhousing"|
                                                         variable=="totalpop") %>%
  mutate(renter_percent=paste(round(estimate[1]/estimate[2]*100), "%", sep="")) %>% 
  filter(variable=="renteroccupiedhousing")
```

```{r include=FALSE}
md_owneroccupiedhousing<- md_details %>% filter(variable=="owneroccupiedhousing")
md_owneroccupiedhousingpercent <- md_details %>% filter(variable=="owneroccupiedhousing"|
                                                         variable=="totalpop") %>%
  mutate(owner_percent=paste(round(estimate[1]/estimate[2]*100), "%", sep="")) %>% 
  filter(variable=="owneroccupiedhousing")
```

```{r include=FALSE}
md_povertybelow100_percent <- md_details %>% filter(variable=="povertybelow100"|
                                                         variable=="totalpop") %>%
  mutate(povertybelow100_percent=paste(round(estimate[1]/estimate[2]*100), "%", sep="")) %>% 
  filter(variable=="povertybelow100")
```

```{r include=FALSE}
md_poverty100to149_percent <- md_details %>% filter(variable=="poverty100to149"|
                                                         variable=="totalpop") %>%
  mutate(poverty100to149_percent=paste(round(estimate[1]/estimate[2]*100), "%", sep="")) %>% 
  filter(variable=="poverty100to149")
```

```{r include=FALSE}
md_foodstampspast12mons<- md_details %>% filter(variable=="foodstampspast12mons")
md_foodstampspast12mons_percent <- md_details %>% filter(variable=="foodstampspast12mons"|
                                                         variable=="totalpop") %>%
  mutate(foodstamps_percent=paste(round(estimate[1]/estimate[2]*100), "%", sep="")) %>% 
  filter(variable=="foodstampspast12mons")
```

```{r include=FALSE}
md_nointernet<- md_details %>% filter(variable=="nointernet")
md_nointernet_percent <- md_details %>% filter(variable=="nointernet"|
                                                         variable=="totalpop") %>%
  mutate(nointernet_percent=paste(round(estimate[1]/estimate[2]*100), "%", sep="")) %>% 
  filter(variable=="nointernet")
```

```{r include=FALSE}
md_unemployed<- md_details %>% filter(variable=="unemployed")
md_unemployed_percent <- md_details %>% filter(variable=="unemployed"|
                                                         variable=="totalpop") %>%
  mutate(unemployed_percent=paste(round(estimate[2]/estimate[1]*100), "%", sep="")) %>% 
  filter(variable=="unemployed")
```

```{r include=FALSE}
md_nosalary<- md_details %>% filter(variable=="nosalary")
md_nosalary_percent <- md_details %>% filter(variable=="nosalary"|
                                            variable=="totalpop") %>%
  mutate(nosalary_percent=paste(round(estimate[1]/estimate[2]*100), "%", sep="")) %>% 
  filter(variable=="nosalary")
```

##### In the Census Bureau's latest 5-year American state Survey (ACS), about `r scales::comma(md_unemployed$estimate)` or roughly `r md_unemployed_percent$unemployed_percent` of `r params$NAME_place`'s inhabitants reported being unemployed and `r scales::comma(md_nosalary$estimate)` or `r md_nosalary_percent$nosalary_percent` reported having no salary. Approximately `r scales::comma(md_poverty)` residents live below the federal poverty line with `r scales::comma(md_povertybelow100$estimate)` (`r md_povertybelow100_percent$povertybelow100_percent`) living below 100% and `r scales::comma(md_poverty100to149$estimate)` (`r md_poverty100to149_percent$poverty100to149_percent`) living between 100-149% of the poverty line. 

### [Housing]{.smallcaps}


##### Approximately `r md_owneroccupiedhousingpercent$owner_percent` of the population live in owner occupied housing and `r md_renteroccupiedhousingpercent$renter_percent` live in renter occupied housing. 

##### 



```{r include=FALSE}
md_novehicle<- md_details %>% filter(variable=="novehicle")
md_novehicle_percent <- md_details %>% filter(variable=="novehicle"|
                                            variable=="totalpop") %>%
  mutate(novehicle_percent=paste(round(estimate[1]/estimate[2]*100), "%", sep="")) %>% 
  filter(variable=="novehicle")
```

```{r include=FALSE}
md_publictransportwork<- md_details %>% filter(variable=="publictransportwork")
md_publictransportwork_percent <- md_details %>% filter(variable=="publictransportwork"|
                                            variable=="totalpop") %>%
  mutate(publictransportwork_percent=paste(round(estimate[1]/estimate[2]*100), "%", sep="")) %>% 
  filter(variable=="publictransportwork")
```

```{r include=FALSE}
md_publicassistance<- md_details %>% filter(variable=="publicassistance")
md_publicassistance_percent <- md_details %>% filter(variable=="publicassistance"|
                                            variable=="totalpop") %>%
  mutate(publicassistance_percent=paste(round(estimate[1]/estimate[2]*100), "%", sep="")) %>% 
  filter(variable=="publicassistance")
```

### [Income & Public Assistance]{.smallcaps}

##### The top income brackets for `r params$NAME_place` residents are those earning `r top_income$variable[1]` and those earning `r top_income$variable[2]`. Approximately `r scales::comma(md_publicassistance$estimate)` or `r md_publicassistance_percent$publicassistance_percent` expressed using public assistance. **Figure 1.5** illustrates the distribution of individual income within `r params$NAME_place`.

###### 

```{r include= TRUE, echo=FALSE, fig.align='center', fig.height=5, fig.width=5.5}
p2
```

### [Tansport & Internet Access]{.smallcaps}

##### Residents indicate that only `r scales::comma(md_novehicle$estimate)` (`r md_novehicle_percent$novehicle_percent`) residents do not have access to a vehicle in their home and `r scales::comma(md_publictransportwork$estimate)` (`r md_publictransportwork_percent$publictransportwork_percent`) utilize public transportation to commute to work. Roughly `r scales::comma(md_nointernet$estimate)` or `r md_nointernet_percent$nointernet_percent` of `r params$NAME_place`'s residents do not have access to the internet in their homes.

###### 


```{r include=FALSE}
# insurance <- md_details %>% 
#   filter(variable=="noinsurance"|
#          variable=="hasprivateinsurance" |
#          variable=="haspublicinsurance"|
#          variable=="totalpop") 
# 
# insurance$variable <- gsub("noinsurance", "do not have insurance", insurance$variable)
# insurance$variable <- gsub("hasprivateinsurance", "have private insurance", insurance$variable)
# insurance$variable <- gsub("haspublicinsurance", "have public insurance", insurance$variable)
# 
# top_insurance<- insurance %>%
#   slice_max(estimate, n=2) 
# 
# top_insurance_percent <- top_insurance %>% 
#   mutate(top_insurance_percent=paste(round(estimate[2]/estimate[1]*100), "%", sep="")) %>% 
#   filter(estimate!=max(estimate))
```


```{r include=FALSE}

## **Medical Insurance (2019)**

##### The vast majority of `r params$NAME_place`'s residents, `r scales::comma(top_insurance_percent$estimate)` (`r top_insurance_percent$top_insurance_percent`), `r top_insurance$variable[2]`. **Table 1.2** illustrates the distribution of insurance in the commmunity.


# insurance2 <- md_details %>% 
#   filter(variable=="noinsurance"|
#          variable=="hasprivateinsurance" |
#          variable=="haspublicinsurance"|
#          variable=="totalpop") 
# 
# insurance2$Percent <- c(paste(round(insurance2$estimate[1]/insurance2$estimate[4]*100), "%", sep=""),
#                         paste(round(insurance2$estimate[2]/insurance2$estimate[4]*100), "%", sep=""),
#                         paste(round(insurance2$estimate[3]/insurance2$estimate[4]*100), "%", sep=""),
#                         paste(round(insurance2$estimate[4]/insurance2$estimate[4]*100), "%", sep=""))
# 
# insurance2 <- insurance2 %>% 
#   filter(variable=="noinsurance"|
#          variable=="hasprivateinsurance" |
#          variable=="haspublicinsurance") |> 
#   select(-state)
# 
# insurance2$variable <- gsub("noinsurance", "No Insurance", insurance2$variable)
# insurance2$variable <- gsub("hasprivateinsurance", "Private Insurance", insurance2$variable)
# insurance2$variable <- gsub("haspublicinsurance", "Public Insurance", insurance2$variable)
```

```{r echo=FALSE, include=TRUE}
# kable(insurance2, booktabs = T, col.names = c("Insurance", "Estimate", "Percent"), align = "c") %>% 
#   kableExtra::kable_styling(position = "center") 

```

```{r}
gini_state_data <- read_rds("data_clean/acs_cleaned_demog_20240818.rds") |>
  filter(variable == "incom_ineq_gini")

gini_county_data <- get_acs(geography = "county",
                      #output="tidy",
                      year=2019,
                      geometry = TRUE,
                      output = "wide",
                      variables= c(
                        # totalpop="B01001_001",
                        incom_ineq_gini = "B19083_001"
                      )) |> 
  mutate(state = gsub(".*, ", "", NAME)) |> 
  mutate(NAME = gsub(" County.*", "", NAME)) |> 
  filter(state == params$NAME_place)

### 

state <- states(
  year = 2019,
  cb = TRUE,
  class = "sf"
  ) |> 
  filter(NAME == params$NAME_place)

# getting the box size (zoom) 
us_main_box <- gini_state_data |> 
  filter(NAME !="Hawaii") |> 
  filter(NAME != "Puerto Rico") |> 
  filter(NAME != "Alaska")

# mid_coord <- st_coordinates(us_main_box)

zoom_us <- st_bbox(us_main_box)
# zoom_counties <- st_bbox(incom_ineq_gini) 
zoom_state <- st_bbox(state) 
# zoom_state <- st_bbox(gini_state_data) 

# cropping the base 
# all_states_cropped <- st_crop(ky_state, xmin = zoom_counties[[1]]-5, #
#                          ymin = zoom_counties[[2]]-0.5,
#                          xmax = zoom_counties[[3]]+1, 
#                          ymax = zoom_counties[[4]]+0.5)
gini_state_data_cropped <- st_crop(gini_state_data, xmin = zoom_us[[1]], #
                         ymin = zoom_us[[2]] ,
                         xmax = zoom_us[[3]],
                         ymax = zoom_us[[4]])
```

```{r include=FALSE, message=FALSE, warning=FALSE}

min <- min(gini_county_data$incom_ineq_giniE) + 0.005
max <- max(gini_county_data$incom_ineq_giniE) -  0.005
sep <- round(((max - min)/5), 2)

map_state <- ggplot() +
  geom_sf(data= gini_county_data, aes(fill = incom_ineq_giniE),
          color = "white") +
  scale_fill_fermenter(
    name = "",
    #breaks = seq(0.40, 0.46, 0.02),
    breaks = seq(round(min, 2), round(max, 2), sep),
    direction = 1,
    palette = "YlGnBu") +
  # labs(title = params$NAME_place,
  #      x = NULL,
  #      y = NULL) +
  theme_map() +
  theme(
    plot.title = element_text(size = 15),
    legend.position="none",
    # Set the legend flush with the left side of the plot, and just slightly below the top of the plot
    # Increase size and horizontal alignment of the both the title and subtitle
    # plot.margin = margin(t = 1,  # Top margin
    #                          r = 4,  # Right margin
    #                          b = 2,  # Bottom margin
    #                          l = 2,  # Left margin
    #                          unit = "cm"),
    panel.border = element_rect(colour = "magenta", fill=NA, size=1)
  )
```


## **Income Inequality (Gini Index)**

```{r include=FALSE, message=FALSE, warning=FALSE, fig.align='center'}


map_us <- ggplot() +
      # geom_sf(data=all_states_cropped,
      #     color = "white",
      #     fill = "white"
      #     )+
  geom_sf(data = gini_state_data, aes(fill = estimate),
          color = "white") +
  # geom_sf(data=all_states_cropped,
  #         fill = NA,
  #         color = "black"
  #         ) +
  # fitBounds(us_main_box, -72, 40, -70, 43)
  # setView(lng = -71.0589, lat = 42.3601, zoom = 12) +
  coord_sf(xlim = c(-124.76307, -66.94989), ylim = c(24.52310, 49.38436), expand = FALSE) +
  scale_fill_fermenter(
    name = "",
    breaks = seq(round(min, 2), round(max, 2), sep),
    direction = 1,
    palette = "YlGnBu") +

  labs(title = paste0(params$NAME_place, " state"),
       x = NULL,
       y = NULL) +
  theme_map() +
  theme(
    plot.title = element_text(hjust = 0.5,  size = 20),
    legend.position = "bottom",
    legend.justification = "right",
    legend.direction = "horizontal",
    legend.key.size = unit(0.9, "cm"),
    plot.margin = margin(t = 1,  # Top margin
                             r = 1,  # Right margin
                             b = 1.5,  # Bottom margin
                             l = 1,  # Left margin
                             unit = "cm")
    ) +
  geom_rect(aes(xmin = zoom_state[[1]]-0.04,
                xmax = zoom_state[[3]]+0.04,
                ymin = zoom_state[[2]]-0.04,
                ymax = zoom_state[[4]]+0.04),
            color = "magenta", fill = NA,
            linewidth = 0.3)





insert <-
  inset_element(map_state, 0.1, 0.1, 0.4, 0.4,
                           align_to = 'full'
                           )

#map_us + insert

```




```{r include=TRUE, message=FALSE, warning=FALSE}
map_us + insert
```








   

#### [Sources:]{.bold}

###### - U.S. Census Bureau, [American county Survey 5-Year Data (2015-2019)]{.italics}. Retrieved from <https://www.census.gov/data/developers/data-sets/acs-5year.html>;

###### - Kyle Walker and Matt Herman (2022). tidycensus: Load US Census Boundary and Attribute Data as 'tidyverse' and 'sf'-Ready Data Frames. R package version 1.2.2. <https://CRAN.R-project.org/package=tidycensus>;

###### - Kyle Walker (2022). tigris: Load Census TIGER/Line Shapefiles. R package version 1.6.1. <https://CRAN.R-project.org/package=tigris>.

